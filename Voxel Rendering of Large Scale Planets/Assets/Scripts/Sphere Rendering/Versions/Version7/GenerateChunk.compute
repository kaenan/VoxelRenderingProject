// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#include "Noise.compute"
#include "MarchingCubesTables.compute"

struct Vertex
{
    float3 position;
    float3 normal;
};

struct Triangle
{
    Vertex vertexC;
    Vertex vertexB;
    Vertex vertexA;
};

AppendStructuredBuffer<Triangle> triangles;

float planetSize;
float3 centre;
int3 startingPosition;
float chunkSize;

//Terrain Parameters
float scale;
float heightMultiplier;
float3 noiseOffset;

//Cave Parameters
float caveScale;
float3 caveNoiseOffset;

float CalculateDistance(float3 xyz)
{
    return sqrt(pow(centre.x - xyz.x, 2) + pow(centre.y - xyz.y, 2) + pow(centre.z - xyz.z, 2));
}

float CalculateNoise(int numLayers, float lacunarity, float persistence, float scale, float3 xyz)
{
    float noise = 0;
    float frequency = scale / 100;
    float amplitude = 1;

    for (int i = 0; i < numLayers; i++)
    {
        float n = 1 - abs(snoise((xyz + noiseOffset) * frequency) * 2 - 1);
        noise += n * amplitude;

        amplitude *= persistence;
        frequency *= lacunarity;
    }
   
    return noise;
}

float3 calculateNormal(int3 xyz)
{
    int3 offsetX = int3(1, 0, 0);
    int3 offsetY = int3(0, 1, 0);
    int3 offsetZ = int3(0, 0, 1);

    float dx = (xyz + offsetX) - (xyz - offsetX);
    float dy = (xyz + offsetY) - (xyz - offsetY);
    float dz = (xyz + offsetZ) - (xyz - offsetZ);

    return normalize(float3(dx, dy, dz));
}

Vertex createVertex(int3 coordA, int3 coordB)
{
    float xyzA;
    float xyzB;
    
    xyzA = CalculateDistance(coordA) + (CalculateNoise(6, 2, 0.5, scale, coordA) * heightMultiplier);
    xyzB = CalculateDistance(coordB) + (CalculateNoise(6, 2, 0.5, scale, coordB) * heightMultiplier);
    
	// Interpolate between the two corner points based on the density
    float t = ((planetSize / 2) - xyzA) / (xyzB - xyzA);
    float3 position = coordA + t * (coordB - coordA);

	// Normal:
    float3 normalA = calculateNormal(coordA);
    float3 normalB = calculateNormal(coordB);
    float3 normal = normalize(normalA + t * (normalB - normalA));

	// Create vertex
    Vertex vertex;
    vertex.position = position;
    vertex.normal = normal;

    return vertex;
}

[numthreads(1,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float3 xyz = id + startingPosition;
                  
    int3 cubeCorners[8];
    cubeCorners[0] = xyz + int3(0, 0, 0);
    cubeCorners[1] = xyz + int3(1, 0, 0);
    cubeCorners[2] = xyz + int3(1, 0, 1);
    cubeCorners[3] = xyz + int3(0, 0, 1);
    cubeCorners[4] = xyz + int3(0, 1, 0);
    cubeCorners[5] = xyz + int3(1, 1, 0);
    cubeCorners[6] = xyz + int3(1, 1, 1);
    cubeCorners[7] = xyz + int3(0, 1, 1);
    
    int cubeConfiguration = 0;
    for (int i = 0; i < 8; i++)
    {
        if (CalculateDistance(cubeCorners[i]) + (CalculateNoise(6, 2, 0.5, scale, cubeCorners[i]) * heightMultiplier) < planetSize / 2)
        {
            cubeConfiguration |= (1 << i);
        }
    }
    
    int edgeIndices[] = triangulation[cubeConfiguration];

    for (i = 0; i < 16; i += 3)
    {
        if (edgeIndices[i] == -1)
        {
            break;
        }
        
        int edgeIndexA = edgeIndices[i];
        int a0 = cornerIndexAFromEdge[edgeIndexA];
        int a1 = cornerIndexBFromEdge[edgeIndexA];

        int edgeIndexB = edgeIndices[i + 1];
        int b0 = cornerIndexAFromEdge[edgeIndexB];
        int b1 = cornerIndexBFromEdge[edgeIndexB];

        int edgeIndexC = edgeIndices[i + 2];
        int c0 = cornerIndexAFromEdge[edgeIndexC];
        int c1 = cornerIndexBFromEdge[edgeIndexC];

        Vertex vertexA = createVertex(cubeCorners[a0], cubeCorners[a1]);
        Vertex vertexB = createVertex(cubeCorners[b0], cubeCorners[b1]);
        Vertex vertexC = createVertex(cubeCorners[c0], cubeCorners[c1]);

        Triangle tri;
        tri.vertexA = vertexC;
        tri.vertexB = vertexB;
        tri.vertexC = vertexA;
        triangles.Append(tri);
    }
}
