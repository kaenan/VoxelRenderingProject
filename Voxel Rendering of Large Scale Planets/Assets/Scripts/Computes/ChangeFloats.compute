// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain


struct Voxel
{
    int x;
    int y;
    int z;
    float distanceValue;
};

AppendStructuredBuffer<Voxel> buffer;
float3 centre;
float size;

float CalculateDistance(int3 p1)
{
    return sqrt(pow(centre.x - p1.x, 2) + pow(centre.y - p1.y, 2) + pow(centre.z - p1.z, 2));
}

[numthreads(8,8,8)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    int3 xyz = int3(id.x, id.y, id.z);
                  
    if (CalculateDistance(xyz) < size / 2 && CalculateDistance(xyz) > (size / 2) - 1)
    {
        Voxel voxel;
        voxel.x = id.x;
        voxel.y = id.y;
        voxel.z = id.z;
        voxel.distanceValue = CalculateDistance(xyz);
        buffer.Append(voxel);
    }
}
